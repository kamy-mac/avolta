# Requêtes HTTP pour tester les contrôleurs Spring Boot

## Variables d'environnement
@baseUrl = http://localhost:8090
@token = eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdXBlcmFkbWluQGF2b2x0YS5iZSIsImlhdCI6MTc0MjQ2OTAyNSwiZXhwIjoxNzQyNTU1NDI1fQ.dqWDH0psCjFV_34JKX9lceB5jAb0I67rUPJoJhSKvBg
@supertoken = eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJzdXBlcmFkbWluQGF2b2x0YS5iZSIsImlhdCI6MTc0MjQ2OTAyNSwiZXhwIjoxNzQyNTU1NDI1fQ.dqWDH0psCjFV_34JKX9lceB5jAb0I67rUPJoJhSKvBg

## 1. PublicationController

### Obtenir toutes les publications (nécessite authentification)
GET {{baseUrl}}/api/publications
Authorization: Bearer {{token}}

### Obtenir les publications actives (endpoint public)
GET {{baseUrl}}/api/publications/public/active

### Obtenir les publications actives par catégorie (endpoint public)
GET {{baseUrl}}/api/publications/public/category/technologie

### Obtenir les publications en attente (superadmin uniquement)
GET {{baseUrl}}/api/publications/pending
Authorization: Bearer {{supertoken}}

### Obtenir une publication par ID (endpoint public)
GET {{baseUrl}}/api/publications/public/7716cc7e-e3e3-457e-979d-ba0ddba8faf8


### Créer une nouvelle publication (nécessite authentification avec un rôle de admin ou superadmin)
POST {{baseUrl}}/api/publications
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Nouvelle Publication3",
  "content": "Contenu de la publication3",
  "category": "technologie",
  "tags": ["java", "spring"],
  "coverImageUrl": "https://example.com/image.jpg",
  "status": "DRAFT",
  "validFrom": "2025-03-15T00:00:00Z",
  "validTo": "2025-12-31T23:59:59Z"
}

### Mettre à jour une publication (nécessite authentification)
PUT {{baseUrl}}/api/publications/c43b4e4c-d4e5-4381-b88b-c77a90eb5f8f
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "title": "Nouvelle Publication1",
  "content": "Contenu de la publication1",
  "category": "technologie",
  "tags": ["java", "spring"],
  "coverImageUrl": "https://example.com/image.jpg",
  "status": "DRAFT",
  "validFrom": "2025-03-15T00:00:00Z",
  "validTo": "2025-12-30T23:59:59Z"
}

### Approuver une publication (superadmin uniquement)
PUT {{baseUrl}}/api/publications/fde83d0c-b6a6-442f-b1c6-e51bead0fbad/approve
Authorization: Bearer {{supertoken}}

### Rejeter une publication (superadmin uniquement)
DELETE {{baseUrl}}/api/publications/123e4567-e89b-12d3-a456-426614174000/reject
Authorization: Bearer {{token}}

### Supprimer une publication (nécessite authentification)
DELETE {{baseUrl}}/api/publications/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

### Aimer une publication (endpoint public)
POST {{baseUrl}}/api/publications/public/fde83d0c-b6a6-442f-b1c6-e51bead0fbad/like

## 2. UserController

### Obtenir tous les utilisateurs (superadmin uniquement)
GET {{baseUrl}}/api/users
Authorization: Bearer {{supertoken}}

### Obtenir un utilisateur par ID (superadmin uniquement)
GET {{baseUrl}}/api/users/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

### Mettre à jour le statut d'un utilisateur (superadmin uniquement)
PUT {{baseUrl}}/api/users/123e4567-e89b-12d3-a456-426614174000/status?status=ACTIVE
Authorization: Bearer {{token}}

### Supprimer un utilisateur (superadmin uniquement)
DELETE {{baseUrl}}/api/users/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

## 3. NewsletterController

### Obtenir tous les abonnés à la newsletter (nécessite authentification)
GET {{baseUrl}}/api/newsletter/subscribers
Authorization: Bearer {{token}}

### S'abonner à la newsletter (endpoint public)
POST {{baseUrl}}/api/newsletter/subscribe
Content-Type: application/json

{
  "email": "utilisateur@example.com",
  "firstName": "Jean",
  "lastName": "Dupont"
}

### Se désabonner de la newsletter (endpoint public)
DELETE {{baseUrl}}/api/newsletter/unsubscribe?email=utilisateur@example.com
Authorization: Bearer {{token}}

### Supprimer un abonné (nécessite authentification)
DELETE {{baseUrl}}/api/newsletter/subscribers/123e4567-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

### Envoyer un email de test (nécessite authentification)
POST {{baseUrl}}/api/newsletter/test?email=utilisateur@example.com
Authorization: Bearer {{token}}

## 4. CommentController

### Obtenir tous les commentaires d'une publication (endpoint public)
GET {{baseUrl}}/api/publications/fd7daac5-39ef-44dc-8b0b-0000bbaca3/comments

### Créer un nouveau commentaire (nécessite authentification)
POST {{baseUrl}}/api/publications/fd7daac5-39ef-44dc-8b0b-0000bbaca3/comments
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "content": "Ceci est un commentaire de test"
}

### Supprimer un commentaire (nécessite authentification)
DELETE {{baseUrl}}/api/publications/fd7daac5-39ef-44dc-8b0b-0000bbaca3/comments/456e7890-e89b-12d3-a456-426614174000
Authorization: Bearer {{token}}

## 5. AuthController

### Enregistrer un nouvel utilisateur admin (superadmin uniquement)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "username": "nouvel_admin",
  "email": "admin@example.com",
  "password": "Mot_de_passe_securise123!",
  "firstName": "Jean",
  "lastName": "Martin",
  "role": "ADMIN"
}

### loger  un superadmin (endpoint public)
POST http://localhost:8090/api/auth/login
Content-Type: application/json

{
  "email": "superadmin@avolta.be",
  "password": "superadmin123"
}

### loger  un admin (endpoint public)
POST http://localhost:8090/api/auth/login
Content-Type: application/json

{
  "email": "admin@avolta.be",
  "password": "admin123"
}

